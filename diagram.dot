digraph {
    rankdir=LR;
    node [shape=box];

    {
        node [style=filled,fillcolor=lightyellow];

        // session canonicalization to detect duplicate flows?
        "plan.knit";
        {
            rank=same;
            // .knit/sessions/xxxx
            session;
            // .knit/objects/xx/yyyy
            objects;
            // .knit/cache/xx/yyyy
            cache;
        }
        // .knit/scratch/xxxx
        scratch;
    }

    "plan.knit" -> session [label="parse\nbuild"];
    "plan.knit" -> resources;
    step -> job [label=compile];
    job -> cache [label=check];
    production -> step [label=complete];
    session -> step [label=list];
    session -> invocation [label=close];

    // dispatch
    job -> scratch [label=unpack];
    scratch -> production [label=pack];
    production -> cache [label=complete];
    scratch -> resources;

    {
        edge [style=dotted,arrowhead=empty];
        { resources job production invocation } -> objects;
    }

    { rank=same; resources; step; }

    // step states
    blocked;
    available;
    blocked -> available;
    available -> fulfilled;
    blocked -> "unmet\n(requirements)";

    // job states
    processing [label="processing\nactive"];
    idle -> processing -> complete;
    processing -> idle [label="terminate\ncancel\nlost"];

    // dependencies
    dependency [label="dependency\npredecessor\nupstream\nchild\nproducer\nprovider\nprerequisite\nrequirement"];
    dependent [label="dependent\nsuccessor\ndownstream\nparent\nconsumer"];
    dependency -> dependent [label=data];

    { rank=same; idle; blocked; step; }
}
